#!/usr/bin/env python3
import re
import json
import requests
from http.cookiejar import MozillaCookieJar, LWPCookieJar
from http.cookies import SimpleCookie
from requests.utils import cookiejar_from_dict

NETFLIX_DOMAIN = 'www.netflix.com'

def load_cookies(filename: str = 'cookie.txt') -> requests.cookies.RequestsCookieJar:
    jar = requests.cookies.RequestsCookieJar()

    # 1) Netscape/MozillaCookieJar
    try:
        mjar = MozillaCookieJar()
        mjar.load(filename, ignore_discard=True, ignore_expires=True)
        for c in mjar:
            jar.set_cookie(c)
        print(f"✅ {len(mjar)} cookies via MozillaCookieJar")
        return jar
    except Exception:
        pass

    # 2) libwww-perl LWPCookieJar
    try:
        ljar = LWPCookieJar()
        ljar.load(filename, ignore_discard=True, ignore_expires=True)
        for c in ljar:
            jar.set_cookie(c)
        print(f"✅ {len(ljar)} cookies via LWPCookieJar")
        return jar
    except Exception:
        pass

    # 3) SimpleCookie parser
    try:
        raw = open(filename, encoding='utf-8').read()
        sc = SimpleCookie()
        sc.load(raw)
        cookies = {k: m.value for k, m in sc.items()}
        if cookies:
            jar = cookiejar_from_dict(cookies, cookiejar=None, overwrite=True)
            print(f"✅ {len(cookies)} cookies via SimpleCookie")
            return jar
    except Exception:
        pass

    # 4) JSON array
    try:
        data = json.load(open(filename, encoding='utf-8'))
        cnt = 0
        for c in data:
            n, v = c.get('name'), c.get('value')
            if not (n and v):
                continue
            jar.set(n, v,
                    domain=c.get('domain', NETFLIX_DOMAIN),
                    path=c.get('path', '/'))
            cnt += 1
        if cnt:
            print(f"✅ {cnt} cookies via JSON")
            return jar
    except Exception:
        pass

    # 5) TSV parser fallback for tab-separated cookie files
    try:
        with open(filename, encoding='utf-8') as f:
            cnt = 0
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) >= 7:
                    domain, host_only, path, secure_flag, expires, name, value = parts[:7]
                    secure = secure_flag.lower() == 'true'
                    jar.set(name, value,
                            domain=domain,
                            path=path,
                            secure=secure)
                    cnt += 1
            if cnt:
                print(f"✅ {cnt} cookies via TSV parser")
                return jar
    except Exception:
        pass

    # 6) explicit HTTP‐Cookie header parser
    try:
        with open(filename, encoding='utf-8') as f:
            for line in f:
                if line.strip().startswith("Cookie:"):
                    cookie_str = line.split("Cookie:", 1)[1].strip()
                    sc = SimpleCookie()
                    sc.load(cookie_str)
                    if sc:
                        jar = cookiejar_from_dict(
                            {k: v.value for k, v in sc.items()},
                            cookiejar=None, overwrite=True
                        )
                        print(f"✅ {len(sc)} cookies via HTTP‐Cookie header")
                        return jar
    except Exception:
        pass

    # 7) regex fallback
    skip = {'expires', 'domain', 'path', 'max-age', 'httponly', 'secure', 'samesite'}
    pat = re.compile(r'([^\s=;]+)=([^\s;]+)')
    cnt = 0
    try:
        for line in open(filename, encoding='utf-8'):
            for name, val in pat.findall(line):
                if name.lower() in skip:
                    continue
                jar.set(name, val, domain=NETFLIX_DOMAIN, path='/')
                cnt += 1
    except Exception:
        pass

    if cnt:
        print(f"✅ {cnt} cookies via regex fallback")
    else:
        print(f"❌ No cookies found in {filename}")
    return jar
